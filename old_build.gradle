plugins {
    id 'java-gradle-plugin'
    id 'groovy'

    id 'eclipse'
    id 'idea'

    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.9.10'

    id 'net.minecrell.licenser' version '0.3'
}

defaultTasks 'clean', 'licenseFormat', 'build'

apply plugin: 'java'

group = 'org.spongepowered'
version = '0.10.0-SNAPSHOT'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

archivesBaseName = project.name.toLowerCase()

repositories {
    jcenter()
}

dependencies {
    compile 'org.apache.httpcomponents:httpmime:4.5.3'
    compile 'org.spongepowered:plugin-meta:0.4.1'
    compile 'org.ow2.asm:asm:5.2'
    compileOnly 'org.codehaus.groovy:groovy-all:2.4.12:indy'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

processResources {
   from 'LICENSE.txt'
}

gradlePlugin {
    plugins {
        gradlePlugin {
            id = 'org.spongepowered.gradle'
            implementationClass = 'org.spongepowered.gradle.SpongeGradlePlugin'
        }
        metaBasePlugin {
            id = 'org.spongepowered.meta.base'
            implementationClass = 'org.spongepowered.gradle.meta.MetadataBasePlugin'
        }
        metaPlugin {
            id = 'org.spongepowered.meta'
            implementationClass = 'org.spongepowered.gradle.meta.MetadataPlugin'
        }
        spongePluginBasePlugin {
            id = 'org.spongepowered.plugin.base'
            implementationClass = 'org.spongepowered.gradle.plugin.SpongePluginBasePlugin'
        }
        spongePluginPlugin {
            id = 'org.spongepowered.plugin'
            implementationClass = 'org.spongepowered.gradle.plugin.SpongePluginPlugin'
        }
    }
}


license {
    header = file('HEADER.txt')
    newLine = false
    ext {
        name = project.name
        organization = project.organization
        url = project.url
    }

    include '**/*.java'
    include '**/*.groovy'
    include '**/*.kt'
}

jar.manifest.attributes(
        'Created-By': "${System.properties['java.version']} (${System.properties['java.vm.vendor']})",

        'Implementation-Title': project.name,
        'Implementation-Version': project.version,
        'Implementation-Vendor': project.organization
)

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'groovydoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourceJar
    archives groovydocJar
}

pluginBundle {
    website = "https://github.com/$project.organization/$project.name"
    vcsUrl = website
    description = project.description
    tags = [Tags.minecraft, Tags.sponge]

    plugins {
        metaPlugin {
            id = GradlePlugins.Meta.id
            displayName = GradlePlugins.Meta.name
            description = GradlePlugins.PluginPlugin.desc
        }
        spongePluginPlugin {
            id = GradlePlugins.PluginPlugin.id
            displayName = GradlePlugins.PluginPlugin.name
            description = GradlePlugins.PluginPlugin.desc
        }
        oreDeployPlugin {
            id = GradlePlugins.OreDeploy.id
            displayName = GradlePlugins.OreDeploy.name
            description = GradlePlugins.OreDeploy.desc
        }
    }

    mavenCoordinates {
        artifactId = project.archivesBaseName
    }
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifactId = project.archivesBaseName

            artifact sourceJar
            artifact groovydocJar
        }
    }

    // This is set by the build server when deploying to the repo
    if (project.hasProperty('spongeRepo')) {
        repositories {
            maven {
                url = project.spongeRepo
                if (project.hasProperty('spongeUsername') && project.hasProperty('spongePassword')) {
                    credentials {
                        username = project.spongeUsername
                        password = project.spongePassword
                    }
                }
            }
        }
    }
}
